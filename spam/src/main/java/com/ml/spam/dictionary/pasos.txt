> > > Confección del Diccionario
Diccionario con palabras en las tres categorías (onlySpamWords, onlyRareSymbols, onlyStopWords): initial_spam_vocabulary.json.
Resumen de Cambios:
Eliminación de inicializaciones estáticas manuales.
Introducción de métodos para cargar y exportar datos.
**Sustitución de WordData por Frequency para simplificar la estructura.
/*
 * Initialization:
 * En este proyecto, "Initialization" significa configurar un diccionario desde un estado básico.
 * Esto incluye:
 * - Leer listas de palabras y símbolos sin frecuencias desde un archivo estático JSON.
 * - Crear un diccionario estructurado donde cada palabra o símbolo tiene frecuencias inicializadas en cero.
 *
 * Esta etapa no incluye la carga de frecuencias actualizadas desde un archivo persistido
 * ni el procesamiento de datos dinámicos para enriquecer el diccionario.
 */

> > > Enriquecimiento: Etapa de Cargar Frecuencias a partir de un Dataset de mensajes spam y ham
Agrego la nueva estructura con package datasetProcessor, models, rules, utils.
Agrego newWords en SpamDictionary
Agrego 2 archivos csv en resources.static
Nueva clase que contiene mensaje y spam/ham: LabeledMessage
<<
    Modularizamos la lectura y procesamiento del CSV:
        CsvMessageProcessor se encarga de leer línea por línea, tokenizar los mensajes y delegar al servicio del diccionario.

    Actualizamos SpamDictionaryService:
    Se añadieron métodos para:
        Actualizar frecuencias de palabras existentes.
        Agregar palabras nuevas al mapa newWords en SpamDictionary.

    Modificamos SpamDictionary:
        Se añadió el mapa newWords para almacenar palabras no clasificadas.

    Flujo resultante:
        Palabras existentes: Frecuencias actualizadas en sus categorías (spam, stopwords, symbols).
        Palabras nuevas: Agregadas al mapa newWords para su posterior clasificación o revisión.
<<
Agrego mensajes_pruebas.txt para testear el processor.

Agrego 2 métodos en el service: loadFromJsonAndReplace y mergeFromJson.

<< Modificando estructura >>
    Creación de WordData: nombre, frecuencia spam, frecuencia ham.
    Creación de enum WordCategory.
    Cambio y adecuación en SpamDictionary:
        * Cambiar initializeCategory por initializeWordsWithZeroFrequency.
        * Se agrega addWord y addWordWithFrequency.
        * Para inicializar:
            Desde un JSON: dictionary.initializeFromJson(jsonObject);
            Desde una lista de palabras base: dictionary.initializeWordsWithZeroFrequency(WordCategory.SPAM_WORDS, List.of("word1", "word2"));
        * Se agregan otros métodos que utilizaremos posteriormente

<< Modificaciones >>
    Creacion de FileLoader en utils\.
    Implementación en SpamDictionaryService y BaseDictionaryBuilderMain.
    Elimino la clase Frequency

